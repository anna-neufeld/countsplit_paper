ns <- seq(1,10,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(2*n,mean=15,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
ns <- seq(2,10,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(2*n,mean=15,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power) <- ns
colnames(power) <- cs
power
ns <- seq(5,50,by=5)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
ns <- seq(20,40,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
26*3
40*3
ns <- seq(15,80,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
47*2
ns <- seq(10,40,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(2*n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
18*3
27*3
32*3
24*3
38*3
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/leidenbase')
157/350
curve((1-(1-x)^(10), xlim=c(0,1))
curve(1-(1-x)^(10), xlim=c(0,1))
lapply(seq(0,1,by=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,by=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,lenght.out=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,length.out=100), function(x) 1-(1-x)^(10))
seq(0,1,length.out=100)
(0.95)^10
(0.96)^10
(0.945)^10
(350-157)
(350-157)/350
350-157
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
t.test(treatment_null~control)$p.value
t.test(treatment_null, control)$p.value
ifelse(7>5,"red","blue")
x <- 14
ifelse(x>10, "true", "false")
ifelse(x>10, "x=5true", "false")
ifelse(x>10, "true", "false")
x=5
ifelse(x>10, "true", "false")
nTrials <- 10000
pvals_all_null <- rep(0,nTrials)
pvals_half_null <- rep(0,nTrials)
pvals_no_null <- rep(0,nTrials)
for (i in 1:nTrials) {
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
pvals_all_null[i] <- t.test(treatment_null, control)$p.value
pvals_no_nuull[i] <- t.test(treatment_non_null, control)$p.value
pvals_half_null[i] <- ifelse(i > nTrials/2, pvals_all_null[i], pvals_no_null[i])
}
for (i in 1:nTrials) {
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
pvals_all_null[i] <- t.test(treatment_null, control)$p.value
pvals_no_null[i] <- t.test(treatment_non_null, control)$p.value
pvals_half_null[i] <- ifelse(i > nTrials/2, pvals_all_null[i], pvals_no_null[i])
}
par(mfrow=c(3,1))
hist(pvals_all_null)
hist(pvals_no_null)
hist(pvals_half_null)
qnorm(0.025)
qnorm(0.975)
library(readxl)
library(tidyverse)
dat <- read_excel("~/Dropbox/ADAP/Study 5_Anna Collab .xlsx")
names(dat) <- c("mouse", "pos", "cond", "rep", "volC", "saC", "lengthC", "volT", "saT", "lengthT")
dat <- dat %>% mutate(row = floor((pos-1)/7)+1, col=((pos+6)%%7))
dat$cond2 <- ordered(dat$cond, levels= c("Control","2% gelMA", "3% gelMA", "5% gelMA", "7% gelMA", "10% gelMA",
"12% gelMA", "15% gelMA", "20% gelMA",
"2% gelMA + NHDFs", "3% gelMA + NHDFs", "5% gelMA + NHDFs", "7% gelMA + NHDFs", "10% gelMA + NHDFs",
"12% gelMA + NHDFs", "15% gelMA + NHDFs", "20% gelMA + NHDFs",
"Collagen", "Collagen + NHDFs", "Matrigel", "Matrigel + NHDFs"))
dat <- dat %>% mutate(saT = as.numeric(saT), volT=as.numeric(volT), lengthT = as.numeric(lengthT))
dat <- dat %>% mutate(summy = volC+saC+lengthC+volT+saT+lengthT, summyC = volC+saC+lengthC, summyT = volT+saT+lengthT)
dat <- dat %>% mutate(coldist = abs(col-3))
allconds <- sort(unique(dat$cond2))
is.gelMA.nonNHDFs <- allconds[2:9]
is.gelMA.NHDFs <- allconds[10:17]
is.gelMA <- c(is.gelMA.nonNHDFs, is.gelMA.NHDFs)
is.NHDFs <- allconds[c(10:17,19,21)]
is.Collagen <- allconds[c(18,19)]
is.Matrigel <- allconds[c(20,21)]
dat <- dat %>% mutate(vesselC = as.factor(summyC > 0), vesselT = as.factor(summyT > 0))
dat <- dat %>% mutate(is.gelMA = dat$cond2 %in% is.gelMA,
is.NHDFs = dat$cond2 %in% is.NHDFs,
is.Collagen = dat$cond2 %in% is.Collagen,
is.Matrigel = dat$cond2 %in% is.Matrigel)
dat$pct.gelMA = 0
dat$pct.gelMA[dat$cond2=="2% gelMA" | dat$cond2=="2% gelMA + NHDFs"] = 2
dat$pct.gelMA[dat$cond2=="3% gelMA" | dat$cond2=="3% gelMA + NHDFs"] = 3
dat$pct.gelMA[dat$cond2=="5% gelMA" | dat$cond2=="5% gelMA + NHDFs"] = 5
dat$pct.gelMA[dat$cond2=="7% gelMA" | dat$cond2=="7% gelMA + NHDFs"] = 7
dat$pct.gelMA[dat$cond2=="10% gelMA" | dat$cond2=="10% gelMA + NHDFs"] = 10
dat$pct.gelMA[dat$cond2=="12% gelMA" | dat$cond2=="12% gelMA + NHDFs"] = 12
dat$pct.gelMA[dat$cond2=="15% gelMA" | dat$cond2=="15% gelMA + NHDFs"] = 15
dat$pct.gelMA[dat$cond2=="20% gelMA" | dat$cond2=="20% gelMA + NHDFs"] = 20
sandwichPs <- function(mod, indices=9:(9+20)) {
res <- lmtest::coeftest(mod, vcov. = sandwich::vcovHC(mod))
return(res[indices,c(1,2,4)])
}
dat$pct.gelMA2 <- dat$pct.gelMA
dat$pct.gelMA2[dat$cond2 %in% is.NHDFs] <- 0
dat$pct.gelMA.N <- dat$pct.gelMA
dat$pct.gelMA.N[!(dat$cond2 %in% is.NHDFs)] <- 0
modVolC <- lm(log10(volC+1)~as.factor(mouse)+row+coldist+
is.gelMA+
pct.gelMA+
is.Collagen+
is.Matrigel+
is.NHDFs, data=dat)
mouseResids <- lm(log10(volC+1)~as.factor(mouse), data=dat)$residuals
mouseResids
mouseResids <- lm(log10(volC+1)~as.factor(mouse), data=dat)$residuals
summary(lm(mouseResids~row+coldist+
is.gelMA+
pct.gelMA+
is.Collagen+
is.Matrigel+
is.NHDFs, data=dat))
summary(modVolC)
summary(modVolC)$coefficients[9:12,1]
summary(lm(mouseResids~row+coldist+
+           is.gelMA+
+           pct.gelMA+
+           is.Collagen+
+           is.Matrigel+
+           is.NHDFs, data=dat))
setwd("~/Dropbox/Pseudotime : PCA NEW/Paper/FinalCode/GlobalNullSims/")
n <- 200
p <- 10
c <- 1
library(tidyverse)
Lambda <- matrix(5, nrow=n, ncol=p)
nTrials <- 1000
pvals_pseudotime <- data.frame(matrix(NA, nrow=nTrials*p, ncol=6))
names(pvals_pseudotime) <- c("Naive", "CellSplitting", "CountSplitting", "Intercept", "Setting")
pvals_cluster <- data.frame(matrix(NA, nrow=nTrials*p, ncol=6))
names(pvals_cluster) <- c("Naive", "CellSplitting", "CountSplitting","Intercept", "Setting")
pvals_pseudotime$Intercept <- rep(Lambda[1,], nTrials)
pvals_cluster$Intercept <- rep(Lambda[1,], nTrials)
counter <- 1
for (i in 1:nTrials) {
set.seed(i)
print(i)
X <- apply(Lambda,2,function(u) rpois(length(u), u))
hX <- log(X+c)
#### NAIVE
#### Question-- PC1 vs. U1!!! Leaning PC1!! Can't really matter lol.
pseudotime <- princomp(hX)$scores[,1]
clustering <- kmeans(hX, centers=2)$cluster
pvals_pseudotime[counter:(counter+p-1),1] <- apply(X, 2, function(u) summary(glm(u~pseudotime, family="poisson"))$coefficients[2,4])
pvals_cluster[counter:(counter+p-1),1] <- apply(X, 2, function(u) summary(glm(u~clustering, family="poisson"))$coefficients[2,4])
#### CELL SPLITTING
train <- sample(1:n, size=n/2)
Xfullcenter <- apply(hX,2,function(u) u -mean(u))
svdtrain <- svd(Xfullcenter[train,])
testpt <- Xfullcenter[-train,]%*%svdtrain$v[,1]
clustering <- kmeans(hX[train,], centers=2)
chat <- clustering$cluster
testchat <- class::knn1(hX[train,], hX[-train,], chat)
pvals_pseudotime[counter:(counter+p-1),2] <- apply(X[-train,], 2, function(u) summary(glm(u~testpt, family="poisson"))$coefficients[2,4])
pvals_cluster[counter:(counter+p-1),2] <- apply(X[-train,], 2, function(u) summary(glm(u~testchat, family="poisson"))$coefficients[2,4])
#### COUNT SPLITTING
eps <- 0.5
Xtrain <- apply(X,2,function(u) rbinom(n=length(u), size=u, p=eps))
Xtest <- X-Xtrain
hXtrain <- log(Xtrain+c)
pseudotime <- princomp(hXtrain)$scores[,1]
clustering <- kmeans(hXtrain, centers=2)$cluster
pvals_pseudotime[counter:(counter+p-1),3] <- apply(Xtest, 2, function(u) summary(glm(u~pseudotime, family="poisson"))$coefficients[2,4])
pvals_cluster[counter:(counter+p-1),3] <- apply(Xtest, 2, function(u) summary(glm(u~clustering, family="poisson"))$coefficients[2,4])
counter <- counter+p
}
pvals <- rbind(pvals_pseudotime, pvals_cluster)
head(pvals)
pvals[,5] <- c(rep("Pseudotime", NROW(pvals_pseudotime)),
rep("Clustering", NROW(pvals_cluster)))
pvals$Setting <- ordered(pvals$Setting, levels=c("Pseudotime","Clustering"))
head(pvals)
save(pvals, file="global_null_res_WNAR_may_5.RData")
setwd("~/Dropbox/Pseudotime : PCA NEW/Paper/FinalCode/GlobalNullSims/")
load("global_null_res_WNAR_may_5.RData")
library(tidyverse)
naivecol <- "#E763F3"
cellsplitcol <- "#00BF7D"
countsplitcol <- "#E7861B"
pall <- ggplot(data=test %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=Jackstraw, col="Jackstraw"), distribution = "qunif")+
geom_qq(aes(sample=DE, col="PseudotimeDE"), distribution="qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
ggtitle("All")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Jackstraw", "PseudotimeDE", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, jackstrawcol,DEcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
head(pvals)
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=Jackstraw, col="Jackstraw"), distribution = "qunif")+
geom_qq(aes(sample=DE, col="PseudotimeDE"), distribution="qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
ggtitle("All")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Jackstraw", "PseudotimeDE", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, jackstrawcol,DEcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
head(pvals)
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
ggtitle("All")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
head(pvals)
ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")
pvals %>% filter(Setting=="Pseudotime")
head(pvals)
pvals$Setting
head(pvals %>% filter(Setting=="Pseudotime"))
library(tidyverse)
head(pvals %>% filter(Setting=="Pseudotime"))
pvals$Setting
pvals %>% filter(Setting=="Pseudotime")
class(pvals)
pvals %>% select(Setting)
pvals %>% filter(Setting < "Clustering")
pvals %>% filter(Setting == 5)
pvals %>% filter("Setting" == 5)
setwd("~/Dropbox/Pseudotime : PCA NEW/Paper/FinalCode/GlobalNullSims/")
load("global_null_res_WNAR_may_5.RData")
library(tidyverse)
naivecol <- "#E763F3"
cellsplitcol <- "#00BF7D"
countsplitcol <- "#E7861B"
pvals %>% filter(Setting=="Pseudotime")
head(pvals)
names(pvals)
names(pvals)[6] <- "junk"
pvals %>% filter(Setting=="Pseudotime")
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
ggtitle("All")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
pall
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
library(patchwork)
pall
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
xlab("Unif(0,1) Quantiles")
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
xlab("Unif(0,1) Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
library(patchwork)
pall
library(patchwork)
pall
ggsave("~/Dropbox/Pseudotime : PCA NEW/Paper/short wnar try 2/Figures/Fig1.png",
width=3.5, height=3.5, units="in")
pall <- ggplot(data=pvals %>% filter(Setting=="Pseudotime"))+
geom_qq(aes(sample=Naive, col="Naive"), distribution = "qunif")+
geom_qq(aes(sample=CellSplitting, col="Cell Splitting"), distribution = "qunif")+
geom_qq(aes(sample=CountSplitting, col="Count Splitting, \u03B5 =0.5"), distribution = "qunif")+
coord_fixed()+
theme_bw()+
geom_abline(slope=1, intercept=0, col="red")+
#xlab("Unif(0,1) Quantiles")+
ylab("Sample Quantiles")+
xlab("Unif(0,1) Quantiles")+
scale_color_manual(
limits = c("Naive", "Cell Splitting", "Count Splitting, \u03B5 =0.5"),
values=c(naivecol, cellsplitcol, countsplitcol))+
#ggtitle("P-values for each gene across 2000 realizations")+
labs(col="Method")+xlab(" ")
library(patchwork)
pall
ggsave("~/Dropbox/Pseudotime : PCA NEW/Paper/short wnar try 2/Figures/Fig1.png")
pall
ggsave("~/Dropbox/Pseudotime : PCA NEW/Paper/short wnar try 2/Figures/Fig1.png")
